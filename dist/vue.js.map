{"version":3,"file":"vue.js","sources":["../src/Observer/index.js","../src/initState.js","../src/init.js","../src/index.js"],"sourcesContent":["// observer方法传入的参数是一个对象，这个对象就是需要进行数据劫持的对象。\r\nexport function observer(data){\r\n    // 判断data数据\r\n    if(typeof data != 'object' || data == null){\r\n        return data\r\n    }\r\n\t// observe 方法内部实现了一个 Observer 类，这个类实现了对数组以及对象进行劫持的方法。\r\n    return new Observer(data)\r\n}\r\n// Observer 类会首先判断被劫持的对象是否为数组或者对象，\r\n// 如果是对象就调用 walk 方法，遍历对象的所有属性，对每个属性进行劫持；\r\n// 如果是数组，就调用 observeArray 方法对数组进行劫持。\r\nclass Observer{\r\n    constructor(value){\r\n\t\t// 数组遍历的话，就把数组的小标当成属性进行劫持了\r\n\t\t// 判断是否为数组\r\n\t\t// console.log(value)\r\n\t\tif(Array.isArray(value)){\r\n\t\t\tconsole.log('数组')\r\n\t\t} else {\r\n\t\t\tthis.walk(value)  // 遍历\r\n\t\t}\r\n    }\r\n    walk(data){\r\n        // Object.keys() 是 JavaScript 内置的一个方法，\r\n        // 用于返回一个对象的可枚举属性（不包括原型链上的属性）列表。其作用是将一个对象的属性转化成由属性名组成的数组。\r\n        let keys = Object.keys(data)\r\n        for(let i = 0; i < keys.length; i++){\r\n            // 对对象中的每个属性进行劫持\r\n            let key = keys[i]\r\n            let value = data[keys]\r\n            defineReactive(data, key, value)\r\n        }\r\n    }\r\n}\r\n// 对对象中的属性进行劫持\r\n// Object.defineProperty 方法会给当前属性添加 getter 和 setter。\r\n// getter 主要用来收集依赖，\r\n// setter 主要用来在属性发生变化时自动触发更新，从而实现响应式的特性。\r\nfunction defineReactive(data, key, value){\r\n    observer(value) // 深度代理\r\n    Object.defineProperty(data, key, {\r\n        get(){\r\n            console.log('获取')\r\n            return value\r\n        },\r\n        set(newValue){\r\n            console.log('设置')\r\n            if(newValue == value) return;\r\n            observer(newValue) // 如果用户设置的值是对象\r\n            value = newValue\r\n        }\r\n    })\r\n}\r\n\r\n","import { observer } from \"./Observer/index\"\r\n\r\nexport function initState(vm){\r\n    let opts = vm.$options\r\n    // 判断\r\n    if(opts.data){\r\n        initData(vm)\r\n    }\r\n}\r\n// vue2对data初始化\r\nfunction initData(vm){\r\n    let data = vm.$options.data\r\n    data = vm._data = typeof data === \"function\" ? data.call(vm) : data  // 改this指向到vm\r\n    // data数据进行劫持\r\n    observer(data)\r\n}\r\n\r\n// data{}中数据    (1)对象    (2)数组     { a:{b:1}, list:[1,2,3], arr:[{}] }","import { initState } from \"./initState\"\r\n\r\n// 初始化的文件放这\r\nexport function initMixin(Vue){\r\n    Vue.prototype._init = function(options){\r\n        console.log(options)\r\n        let vm = this\r\n        vm.$options = options  // 给vm实例的options属性赋值options\r\n        // 初始化状态\r\n        initState(vm)\r\n    }\r\n}\r\n\r\n// 这段代码是一个Vue的初始化函数，通过Vue的原型链给Vue实例添加了_init方法。\r\n// 该方法会接收一个options对象参数，并将其赋值给Vue实例的$options属性。\r\n// 同时，该方法还调用了initState函数，用于初始化Vue实例的状态。","import { initMixin } from \"./init\"\r\n\r\n// 入口文件\r\nfunction Vue(options){\r\n    // 初始化\r\n    this._init(options)\r\n}\r\n\r\ninitMixin(Vue)\r\n// 暴露出去\r\nexport default Vue"],"names":[],"mappings":"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"}